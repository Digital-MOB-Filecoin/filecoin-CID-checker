// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	bsontypes "github.com/protofire/filecoin-CID-checker/internals/bsontypes"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// DealsRepo is an autogenerated mock type for the DealsRepo type
type DealsRepo struct {
	mock.Mock
}

// BulkWrite provides a mock function with given fields: deals
func (_m *DealsRepo) BulkWrite(deals []*bsontypes.MarketDeal) error {
	ret := _m.Called(deals)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*bsontypes.MarketDeal) error); ok {
		r0 = rf(deals)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateIndexes provides a mock function with given fields:
func (_m *DealsRepo) CreateIndexes() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: filter
func (_m *DealsRepo) Find(filter primitive.M) ([]*bsontypes.MarketDeal, error) {
	ret := _m.Called(filter)

	var r0 []*bsontypes.MarketDeal
	if rf, ok := ret.Get(0).(func(primitive.M) []*bsontypes.MarketDeal); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*bsontypes.MarketDeal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.M) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeal provides a mock function with given fields: dealID
func (_m *DealsRepo) GetDeal(dealID uint64) (*bsontypes.MarketDeal, error) {
	ret := _m.Called(dealID)

	var r0 *bsontypes.MarketDeal
	if rf, ok := ret.Get(0).(func(uint64) *bsontypes.MarketDeal); ok {
		r0 = rf(dealID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bsontypes.MarketDeal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(dealID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Miners provides a mock function with given fields:
func (_m *DealsRepo) Miners() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
